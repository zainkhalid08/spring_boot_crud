package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    // Message to show when an entity isn't found.
    private String notFoundMessage = "Entity doesn\'t exist. Try searching for another.";

    // Message to show when name or email is missing.
    private String validationMessage = "Make sure that the fields are filled properly.";

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping(path="/create") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) throws Exception {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

//        if (name.isEmpty() || email.isEmpty()) {
//            throw new Exception(validationMessage);
//        }

        User user = new User();
        user.setName(name);
        user.setEmail(email);
        userRepository.save(user);
        return "Saved";
    }

    @GetMapping(path="/show/{id}")
    public @ResponseBody Optional<User> showUser(@PathVariable int id) throws Exception {

        if (userRepository.existsById(id)) {
            return userRepository.findById(id);
        } else {
            throw new Exception (notFoundMessage);
        }
    }

    @PostMapping(path="/update/{id}")
    public @ResponseBody String updateUser (@PathVariable int id, @RequestParam String name, @RequestParam String email) throws Exception {

//        if (name.isEmpty() || email.isEmpty()) {
//            throw new Exception(validationMessage);
//        }

        if (! userRepository.existsById(id)) {
            throw new Exception (notFoundMessage); // return notFoundMessage;
        }

        Optional<User> userRepo = userRepository.findById(id);
        User user = userRepo.get();
        user.setName(name);
        user.setEmail(email);
        userRepository.save(user);
        return "Updated";
    }

    @PostMapping(path="/delete/{id}")
    public @ResponseBody String deleteUser (@PathVariable int id) throws Exception {

        if (! userRepository.existsById(id)) {
            throw new Exception (notFoundMessage); // return notFoundMessage;
        }

        userRepository.deleteById(id);
        return "Deleted";
    }
}